'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var _assertThisInitialized = _interopDefault(require('@babel/runtime/helpers/assertThisInitialized'));
var _inheritsLoose = _interopDefault(require('@babel/runtime/helpers/inheritsLoose'));
var _defineProperty = _interopDefault(require('@babel/runtime/helpers/defineProperty'));
var React = require('react');
var InView = require('react-intersection-observer');
var InView__default = _interopDefault(InView);

function calculateVerticalPercentage(bounds, threshold, root) {
  if (threshold === void 0) {
    threshold = 0;
  }

  if (root === void 0) {
    root = window;
  }

  if (!root) return 0;
  var vh = (root instanceof Element ? root.clientHeight : root.innerHeight) || 0;
  var offset = threshold * bounds.height;
  var percentage = (bounds.bottom - offset) / (vh + bounds.height - offset * 2);
  return 1 - Math.max(0, Math.min(1, percentage));
}
function calculateHorizontalPercentage(bounds, threshold, root) {
  if (threshold === void 0) {
    threshold = 0;
  }

  if (root === void 0) {
    root = window;
  }

  if (!root) return 0;
  var vw = (root instanceof Element ? root.clientWidth : root.innerWidth) || 0;
  var offset = threshold * bounds.width;
  var percentage = (bounds.right - offset) / (vw + bounds.width - offset * 2);
  return 1 - Math.max(0, Math.min(1, percentage));
}

function isPlainChildren(props) {
  return typeof props.children !== 'function';
}
/**
 * Monitors scroll, and triggers the children function with updated props
 *
 <ScrollPercentage>
 {({ref, percentage}) => (
   <h1 ref={ref}>{`${percentage}`}</h1>
 )}
 </ScrollPercentage>
 */


var ScrollPercentage =
/*#__PURE__*/
function (_React$Component) {
  _inheritsLoose(ScrollPercentage, _React$Component);

  function ScrollPercentage() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;

    _defineProperty(_assertThisInitialized(_this), "state", {
      percentage: 0,
      inView: false,
      entry: undefined
    });

    _defineProperty(_assertThisInitialized(_this), "node", undefined);

    _defineProperty(_assertThisInitialized(_this), "monitoring", false);

    _defineProperty(_assertThisInitialized(_this), "handleScroll", function () {
      if (!_this.node) return;

      var bounds = _this.node.getBoundingClientRect();

      var percentage = _this.props.horizontal ? calculateHorizontalPercentage(bounds, _this.props.threshold, _this.props.root) : calculateVerticalPercentage(bounds, _this.props.threshold, _this.props.root);

      if (percentage !== _this.state.percentage) {
        _this.setState({
          percentage: percentage
        });
      }
    });

    _defineProperty(_assertThisInitialized(_this), "handleInView", function (inView, entry) {
      _this.node = entry.target;

      _this.setState({
        entry: entry,
        inView: inView
      });
    });

    _defineProperty(_assertThisInitialized(_this), "handleRenderProps", function (_ref) {
      var ref = _ref.ref;
      var _this$state = _this.state,
          percentage = _this$state.percentage,
          entry = _this$state.entry,
          inView = _this$state.inView;

      if (!isPlainChildren(_this.props)) {
        return _this.props.children({
          percentage: percentage,
          entry: entry,
          inView: inView,
          ref: ref
        });
      }

      return null;
    });

    return _this;
  }

  var _proto = ScrollPercentage.prototype;

  _proto.componentDidUpdate = function componentDidUpdate(prevProps, prevState) {
    if (this.props.onChange && (prevState.percentage !== this.state.percentage || prevState.inView !== this.state.inView)) {
      this.props.onChange(this.state.percentage, this.state.entry);
    }

    if (prevProps.root !== this.props.root) {
      if (this.monitoring) {
        this.monitorScroll(false, prevProps.root);
        this.monitorScroll(this.state.inView);
      }
    }

    if (prevState.inView !== this.state.inView) {
      this.monitorScroll(this.state.inView, prevProps.root);
    }
  };

  _proto.componentWillUnmount = function componentWillUnmount() {
    this.monitorScroll(false);
  };

  _proto.monitorScroll = function monitorScroll(enabled, target) {
    var root = target || this.props.root || window;

    if (enabled) {
      if (this.monitoring) return;
      root.addEventListener('scroll', this.handleScroll, {
        passive: true
      });
      root.addEventListener('resize', this.handleScroll);
      this.handleScroll();
      this.monitoring = true;
    } else {
      if (!this.monitoring) return;
      root.removeEventListener('scroll', this.handleScroll);
      root.removeEventListener('resize', this.handleScroll);
      this.monitoring = false;
    }
  };

  _proto.render = function render() {
    return React.createElement(InView__default, {
      onChange: this.handleInView
    }, !isPlainChildren(this.props) ? this.handleRenderProps : this.props.children);
  };

  return ScrollPercentage;
}(React.Component);

_defineProperty(ScrollPercentage, "displayName", 'ScrollPercentage');

_defineProperty(ScrollPercentage, "defaultProps", {
  threshold: 0
});

/**
 * Create a hook that reports the percentage an element is scrolled into the viewport.
 * @param options {ScrollPercentageOptions}
 */

function useScrollPercentage(options) {
  if (options === void 0) {
    options = {};
  }

  var _useInView = InView.useInView(options),
      ref = _useInView[0],
      inView = _useInView[1],
      entry = _useInView[2];

  var _useState = React.useState(0),
      percentage = _useState[0],
      setPercentage = _useState[1];

  var target = entry && entry.target;
  React.useEffect(function () {
    var handleScroll = function handleScroll() {
      if (!target) return;
      var bounds = target.getBoundingClientRect();
      var percentage = options.horizontal ? calculateHorizontalPercentage(bounds, options.threshold, options.root) : calculateVerticalPercentage(bounds, options.threshold, options.root);
      setPercentage(percentage);
    };

    if (inView) {
      var root = options.root || window;
      root.addEventListener('scroll', handleScroll, {
        passive: true
      });
      root.addEventListener('resize', handleScroll);
      return function () {
        root.removeEventListener('scroll', handleScroll);
        root.removeEventListener('resize', handleScroll);
      };
    } // Trigger a scroll update, so we set the initial scroll percentage


    handleScroll();
    return;
  }, [inView, options.root, options.horizontal, options.threshold, target]);
  return [ref, percentage, entry];
}

exports.ScrollPercentage = ScrollPercentage;
exports.default = ScrollPercentage;
exports.useScrollPercentage = useScrollPercentage;
